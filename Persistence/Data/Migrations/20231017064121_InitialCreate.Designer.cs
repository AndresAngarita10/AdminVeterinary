// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231017064121_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("breed", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DescriptionMedicalTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("AdministrationDate")
                        .HasColumnType("date")
                        .HasColumnName("administrationDate");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("dose");

                    b.Property<int>("MedicalTreatmentIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("observation");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTreatmentIdFk");

                    b.HasIndex("MedicineIdFk");

                    b.ToTable("descriptionMedicalTreatment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DetailMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<int>("MedicineMovementIdFk")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("MedicineIdFk");

                    b.HasIndex("MedicineMovementIdFk");

                    b.ToTable("detailMovement", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("gender", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("laboratory", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicalTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateStartTreatment")
                        .HasColumnType("date")
                        .HasColumnName("dateStartTreatment");

                    b.Property<int>("QuoteIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuoteIdFk");

                    b.ToTable("medicalTreatment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LaboratoryIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<int>("QuantityAvalible")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("quantityAvalible");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryIdFk");

                    b.ToTable("medicine", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicineMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateMovement")
                        .HasColumnType("date")
                        .HasColumnName("dateMovement");

                    b.Property<int>("Quantity")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("TypeMovementFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeMovementFk");

                    b.ToTable("medicineMovement", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MedicinePartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicineIdFk")
                        .HasColumnType("int");

                    b.Property<int>("PartnerIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicineIdFk");

                    b.HasIndex("PartnerIdFk");

                    b.ToTable("medicinePartner", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<int>("GenderIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<int>("PartnerTypeIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.Property<int>("SpecialtyIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderIdFk");

                    b.HasIndex("PartnerTypeIdFk");

                    b.HasIndex("SpecialtyIdFk");

                    b.ToTable("partner", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PartnerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("partnerType", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BreedIdFk")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("datebirth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<int>("SpeciesIdFk")
                        .HasColumnType("int");

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedIdFk");

                    b.HasIndex("SpeciesIdFk");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("pet", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeOnly>("Hour")
                        .HasColumnType("time")
                        .HasColumnName("hour");

                    b.Property<int>("PetIdFk")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("reason");

                    b.Property<int>("VeterinarianIdFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetIdFk");

                    b.HasIndex("VeterinarianIdFk");

                    b.ToTable("quote", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Expired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("rolName");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specialty", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specie", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TypeMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("typeMovement", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<int>("GenderIdfk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("GenderIdfk");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserIdFk")
                        .HasColumnType("int");

                    b.Property<int>("RolIdFk")
                        .HasColumnType("int");

                    b.HasKey("UserIdFk", "RolIdFk");

                    b.HasIndex("RolIdFk");

                    b.ToTable("userRol", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DescriptionMedicalTreatment", b =>
                {
                    b.HasOne("Domain.Entities.MedicalTreatment", "MedicalTreatment")
                        .WithMany("DescriptionMedicalTreatments")
                        .HasForeignKey("MedicalTreatmentIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("DescriptionMedicalTreatments")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTreatment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Domain.Entities.DetailMovement", b =>
                {
                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("DetailMovements")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MedicineMovement", "MedicineMovement")
                        .WithMany("DetailMovements")
                        .HasForeignKey("MedicineMovementIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MedicineMovement");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTreatment", b =>
                {
                    b.HasOne("Domain.Entities.Quote", "Quote")
                        .WithMany("MedicalTreatments")
                        .HasForeignKey("QuoteIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.HasOne("Domain.Entities.Laboratory", "Laboratory")
                        .WithMany("Medicines")
                        .HasForeignKey("LaboratoryIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("Domain.Entities.MedicineMovement", b =>
                {
                    b.HasOne("Domain.Entities.TypeMovement", "TypeMovement")
                        .WithMany("MedicineMovements")
                        .HasForeignKey("TypeMovementFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeMovement");
                });

            modelBuilder.Entity("Domain.Entities.MedicinePartner", b =>
                {
                    b.HasOne("Domain.Entities.Medicine", "Medicine")
                        .WithMany("MedicinePartners")
                        .HasForeignKey("MedicineIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partner", "Partner")
                        .WithMany("MedicinePartners")
                        .HasForeignKey("PartnerIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Partners")
                        .HasForeignKey("GenderIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PartnerType", "PartnerType")
                        .WithMany("Partners")
                        .HasForeignKey("PartnerTypeIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specialty", "Specialty")
                        .WithMany("Partners")
                        .HasForeignKey("SpecialtyIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PartnerType");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.HasOne("Domain.Entities.Breed", "Breed")
                        .WithMany("Pets")
                        .HasForeignKey("BreedIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Specie", "Specie")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Owner");

                    b.Navigation("Specie");
                });

            modelBuilder.Entity("Domain.Entities.Quote", b =>
                {
                    b.HasOne("Domain.Entities.Pet", "Pet")
                        .WithMany("Quotes")
                        .HasForeignKey("PetIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Partner", "Veterinarian")
                        .WithMany("Quotes")
                        .HasForeignKey("VeterinarianIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderIdfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RolIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserIdFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Breed", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Partners");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Laboratory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Domain.Entities.MedicalTreatment", b =>
                {
                    b.Navigation("DescriptionMedicalTreatments");
                });

            modelBuilder.Entity("Domain.Entities.Medicine", b =>
                {
                    b.Navigation("DescriptionMedicalTreatments");

                    b.Navigation("DetailMovements");

                    b.Navigation("MedicinePartners");
                });

            modelBuilder.Entity("Domain.Entities.MedicineMovement", b =>
                {
                    b.Navigation("DetailMovements");
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.Navigation("MedicinePartners");

                    b.Navigation("Pets");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Domain.Entities.PartnerType", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("Domain.Entities.Pet", b =>
                {
                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Domain.Entities.Quote", b =>
                {
                    b.Navigation("MedicalTreatments");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.Entities.Specialty", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("Domain.Entities.Specie", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Domain.Entities.TypeMovement", b =>
                {
                    b.Navigation("MedicineMovements");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
